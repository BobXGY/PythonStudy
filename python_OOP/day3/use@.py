#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# 认识函数装饰器


def log(func):
    def wrapper():
        print('call %s():' % func.__name__)
        func()
    return wrapper


# 从这里开始向下阅读
@log
def now():              # 假设有一函数now()
    print('2018-9-10')


# 现在，假设我们要增强now()函数的功能，比如，在函数调用前后自动打印日志，但又不希望修改now()函数的定义
# 这种在代码运行期间动态增加功能的方式，称之为“装饰器”（Decorator）。
# 本质上，decorator就是一个返回函数的高阶函数。所以，我们要定义一个能打印日志的decorator，可以定义log函数在now()的前面，向上看


if __name__ == '__main__':
    now()
    # 这时调用now,由于前面有一个@log修饰器, 相当于做了这样两步操作 temp = log(now); temp()

#####################################################################################################################
# 有参数的情况参见use@2.py                                                                                            #
#####################################################################################################################
